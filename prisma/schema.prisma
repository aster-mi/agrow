// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 認証系
model Account {
  id                 Int     @id @default(autoincrement())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String? @db.Text
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// リソース
model Rack {
  code       String   @id @unique @default(cuid())
  name       String
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id])
  design     String?
  size       Int?
  monthlyFee Int?
  agaves     Agave[]
  rackPlan   RackPlan @relation(fields: [rackPlanId], references: [id])
  rackPlanId Int
  deleted    Boolean  @default(false)

  @@unique([name, ownerId], name: "UniqueMyRack")
}

model RackPlan {
  id         Int    @id @default(autoincrement())
  name       String
  size       Int
  monthlyFee Int
  racks      Rack[]
}

model Agave {
  id           Int            @id @default(autoincrement())
  slug         String         @unique @default(cuid())
  name         String
  tags         TagsOnAgaves[]
  description  String?
  isPublished  Boolean        @default(true)
  ownerId      String?
  owner        User?          @relation(fields: [ownerId], references: [id])
  iconUrl      String?
  agaveImages  AgaveImage[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  parentId     Int?
  pups         Agave[]        @relation("ParentPup")
  parent       Agave?         @relation("ParentPup", fields: [parentId], references: [id])
  shortLinks   ShortLink[]
  rackPosition Int?
  rackCode     String?
  rack         Rack?          @relation(fields: [rackCode], references: [code])
  deleted      Boolean        @default(false)

  @@unique([rackPosition, rackCode], name: "UniquePositionInRack")
}

model Tag {
  id      Int            @id @default(autoincrement())
  name    String         @unique
  agaves  TagsOnAgaves[]
  deleted Boolean        @default(false)
}

model TagsOnAgaves {
  agaveId Int
  agave   Agave @relation(fields: [agaveId], references: [id])
  tagId   Int
  tag     Tag   @relation(fields: [tagId], references: [id])

  @@id([agaveId, tagId])
}

model ShortLink {
  link      String  @id @unique @default(cuid())
  agaveSlug String?
  agave     Agave?  @relation(fields: [agaveSlug], references: [slug])
}

model User {
  id            String       @id @default(cuid())
  publicId      String       @unique @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  ownedAgaves   Agave[]
  likedPosts    Like[]
  followers     Follow[]     @relation("Followers")
  following     Follow[]     @relation("Following")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  AgaveImages   AgaveImage[]
  racks         Rack[]
  isAdmin       Boolean      @default(false)
}

model Follow {
  id         Int    @id @default(autoincrement())
  follower   User   @relation("Followers", fields: [followerId], references: [id])
  followerId String
  followed   User   @relation("Following", fields: [followedId], references: [id])
  followedId String

  @@unique([followerId, followedId])
}

model AgaveImage {
  id        Int                  @id @default(autoincrement())
  url       String               @unique
  agaveId   Int
  agave     Agave                @relation(fields: [agaveId], references: [id])
  createdAt DateTime             @default(now())
  shotDate  DateTime             @default(now())
  ownerId   String
  owner     User                 @relation(fields: [ownerId], references: [id])
  posts     PostsOnAgaveImages[]
  deleted   Boolean              @default(false)
}

model Post {
  id          Int                  @id @default(autoincrement())
  content     String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  likes       Like[]
  authorId    String
  author      User                 @relation(fields: [authorId], references: [id])
  parentId    Int?
  parent      Post?                @relation("RepliesTo", fields: [parentId], references: [id])
  replies     Post[]               @relation("RepliesTo")
  agaveImages PostsOnAgaveImages[]
  deleted     Boolean              @default(false)
}

model PostsOnAgaveImages {
  postId       Int
  post         Post       @relation(fields: [postId], references: [id])
  agaveImageId Int
  agaveImage   AgaveImage @relation(fields: [agaveImageId], references: [id])

  @@id([postId, agaveImageId])
}

model Like {
  id     Int    @id @default(autoincrement())
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
